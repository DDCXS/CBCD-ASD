(* 无人机非对称加密 *)
type uskey.
type upkey.

fun upk(uskey) : upkey [private].
fun uenc(bitstring, upkey) : bitstring.

reduc forall m : bitstring, sk : uskey; udec(uenc(m, upk(sk)), sk) = m.

(* 地面站非对称加密 *)
type gskey.
type gpkey.

fun gpk(gskey) : gpkey [private].
fun genc(bitstring, gpkey) : bitstring.
fun Sign(bitstring, gskey) : bitstring.

reduc forall m : bitstring, sk : gskey; gdec(genc(m, gpk(sk)), sk) = m.

(* 其他函数和重构函数 *)
fun ConcatThree(upkey, bitstring, bitstring) : bitstring [private].


reduc forall m1 : upkey, m2 : bitstring, m3 : bitstring; Separate1(ConcatThree(m1, m2, m3)) = m1.
reduc forall m1 : upkey, m2 : bitstring, m3 : bitstring; Separate2(ConcatThree(m1, m2, m3)) = m2.
reduc forall m1 : upkey, m2 : bitstring, m3 : bitstring; Separate3(ConcatThree(m1, m2, m3)) = m3.

(* 信道 *)
free c : channel.

(* 私有参数 *)
free IDi : bitstring [private].

(* 判断是否被攻击者截获 *)
query attacker(IDi).
query attacker(new usk).
query attacker(new gsk).

noninterf IDi.
weaksecret IDi.


(* 事件 *)
event UAV_recieve_gpk_from_GS(gpkey).
event UAV_send_msg1(upkey, bitstring, bitstring, gpkey).
event GS_recieve_msg1(upkey, bitstring, bitstring, gpkey).
event GS_send_Cert(upkey, bitstring).
event UAV_receive_Cert(bitstring).

(* 添加认证查询 *)

(* 确保无人机在发送消息1之前已经接收到地面站的公钥 *)
query uav_upk: upkey, idi: bitstring, ti: bitstring, gpkX: gpkey;
      event(UAV_send_msg1(uav_upk, idi, ti, gpkX)) ==> event(UAV_recieve_gpk_from_GS(gpkX)).

(* 确保地面站在发送证书之前已经接收到无人机发送的消息1 *)
query gs_upk: upkey, idi: bitstring, ti: bitstring, gpk: gpkey, cert: bitstring;
      event(GS_send_Cert(gs_upk, cert)) ==> event(GS_recieve_msg1(gs_upk, idi, ti, gpk)).


(* UAV Process *)
let UAV(upk: upkey, usk: uskey, gpk: gpkey) =
    in (c, gpkX:gpkey);
    event UAV_recieve_gpk_from_GS(gpkX);

    new ti : bitstring;
    let temp1 = ConcatThree(upk, IDi, ti) in
    let msg1 = genc(temp1, gpkX) in
    out (c, msg1);
    event UAV_send_msg1(upk, IDi, ti, gpkX);


    in (c, msg2 : bitstring);
    let Cert = udec(msg2, usk) in
    event UAV_receive_Cert(Cert).


(* Ground Station Process *)
let GS(gpk: gpkey, gsk: gskey, upk: upkey) =
    out (c, gpk);

    in (c, msg1 : bitstring);

    let temp2 = gdec(msg1, gsk) in
    let upk' = Separate1(temp2) in
    let idi = Separate2(temp2) in
    let ti' = Separate3(temp2) in
    event GS_recieve_msg1(upk', idi, ti', gpk);

    if idi = IDi then
    new Ti : bitstring;
    let temp3 = ConcatThree(upk', IDi, ti') in
    let Cert = Sign(temp3, gsk) in
    let msg2 = uenc(Cert, upk) in
    out (c, msg2);
    event GS_send_Cert(upk', Cert).


(* Process *)
process
    new usk : uskey;
    new gsk : gskey;
    let upk = upk(usk) in out(c, upk);
    let gpk = gpk(gsk) in out(c, gpk);
    ((!GS(gpk, gsk, upk)) | (!UAV(upk, usk, gpk)))


